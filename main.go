package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"github.com/tealeg/xlsx"
	"io/ioutil"
	"os"
	"path"
	"strconv"
	"strings"
	"time"
	"unicode"
)

// 전역 변수
var USE_CSV bool
var USE_JSON bool
var USE_SQL bool
var USE_PROTOBUF bool

type FieldInfo struct {
	col   int
	ftype string
	fname string
}

func TrimString(cell *xlsx.Cell) string {
	s, _ := cell.String()
	// return strings.TrimSpace(s)
	return strings.Trim(s, "# ")
}

func IsComment(cell *xlsx.Cell) bool {
	s, _ := cell.String()

	return strings.HasPrefix(s, "#")
}

func CamelToSnake(in string) string {
	runes := []rune(in)
	length := len(runes)

	var out []rune
	for i := 0; i < length; i++ {
		if i > 0 && unicode.IsUpper(runes[i]) && ((i+1 < length && unicode.IsLower(runes[i+1])) || unicode.IsLower(runes[i-1])) {
			out = append(out, '_')
		}
		out = append(out, unicode.ToLower(runes[i]))
	}

	return string(out)
}

func ExportCSV(sheet *xlsx.Sheet, field_list []FieldInfo) {
	var buffer string

	var columns []string
	for _, field := range field_list {
		columns = append(columns, field.fname)
	}

	buffer += fmt.Sprintln(strings.Join(columns, "\t") + "\r")

	for r := 1; r < sheet.MaxRow; r++ {
		if IsComment(sheet.Cell(r, 0)) {
			continue
		}

		var values []string
		for _, field := range field_list {
			cell := sheet.Cell(r, field.col)
			// 비어 있다
			if len(TrimString(cell)) == 0 {
				continue
			}

			switch field.ftype {
			case "":
				switch cell.Type() {
				case xlsx.CellTypeDate:
					fmt.Println(TrimString(cell))
				case xlsx.CellTypeFormula, xlsx.CellTypeNumeric:
					v, _ := cell.Float()
					values = append(values, strconv.FormatFloat(v, 'f', -1, 32))
				default:
					values = append(values, TrimString(cell))
				}
			case "string":
				values = append(values, TrimString(cell))
			case "float32":
				v, e := cell.Float()
				if e != nil {
					fmt.Errorf("row: %d, col: %d, %s\n", r, field.col, e)
					continue
				}
				values = append(values, strconv.FormatFloat(v, 'f', -1, 32))
			default:
				v, e := cell.Int()
				if e != nil {
					fmt.Errorf("row: %d, col: %d, %s\n", r, field.col, e)
					continue
				}
				values = append(values, strconv.Itoa(v))
			}
		}
		if len(values) == len(field_list) {
			buffer += fmt.Sprintln(strings.Join(values, "\t") + "\r")
		} else {
			// fmt.Println("Skipped row:", r, "values:", values)
		}
	}

	var fn string = sheet.Name + ".csv"
	if err := ioutil.WriteFile(fn, []byte(buffer), 0644); err == nil {
		fmt.Println("Exported", fn)
	}
}

func ExportJson(sheet *xlsx.Sheet, name string, field_list []FieldInfo) {
	field_count := 0
	for _, field := range field_list {
		if len(field.ftype) > 0 {
			field_count++
		}
	}

	var data []interface{}
	for r := 1; r < sheet.MaxRow; r++ {
		if IsComment(sheet.Cell(r, 0)) {
			continue
		}

		var doc = make(map[string]interface{})
		for _, field := range field_list {
			cell := sheet.Cell(r, field.col)
			switch field.ftype {
			case "":
				continue
			case "string":
				doc[field.fname] = TrimString(cell)
			case "float32":
				v, e := cell.Float()
				if e != nil {
					fmt.Errorf("row: %d, col: %d, %s\n", r, field.col, e)
					continue
				}
				doc[field.fname] = v
			default:
				v, e := cell.Int()
				if e != nil {
					fmt.Errorf("row: %d, col: %d, %s\n", r, field.col, e)
					continue
				}
				doc[field.fname] = v
			}
		}
		if len(doc) == field_count {
			data = append(data, doc)
		}
	}

	if buf, err := json.Marshal(data); err != nil {
		fmt.Println(err)
	} else {
		fn := CamelToSnake(name) + ".json"
		if err := ioutil.WriteFile(fn, buf, 0644); err == nil {
			fmt.Println("Exported", fn, len(data))
		}
	}
}

func ExportSQL(sheet *xlsx.Sheet, name string, field_list []FieldInfo, filename string) {
	field_count := 0
	for _, field := range field_list {
		if len(field.ftype) > 0 {
			field_count++
		}
	}

	var data []string
	for r := 1; r < sheet.MaxRow; r++ {
		if IsComment(sheet.Cell(r, 0)) {
			continue
		}

		var values []string
		for _, field := range field_list {
			cell := sheet.Cell(r, field.col)
			switch field.ftype {
			case "":
				continue
			case "string":
				v, e := cell.String()
				if e != nil {
					fmt.Errorf("row: %d, col: %d, %s\n", r, field.col, e)
					continue
				}
				values = append(values, "'"+v+"'")
			case "float32":
				v, e := cell.Float()
				if e != nil {
					fmt.Errorf("row: %d, col: %d, %s\n", r, field.col, e)
					continue
				}
				values = append(values, strconv.FormatFloat(v, 'f', -1, 32))
			default:
				v, e := cell.Int()
				if e != nil {
					fmt.Errorf("row: %d, col: %d, %s\n", r, field.col, e)
					continue
				}
				values = append(values, strconv.Itoa(v))
			}
		}
		if len(values) == field_count {
			data = append(data, fmt.Sprintf("(%s)", strings.Join(values, ",")))
		}
	}

	var buf string
	var columns []string
	for _, field := range field_list {
		columns = append(columns, "`"+field.fname+"`")
	}
	buf += fmt.Sprintf("-- Auto generated by kw-data-expoter\n")
	buf += fmt.Sprintf("-- Source: %s::%s\n", filename, sheet.Name)
	buf += fmt.Sprintf("-- Date: %s\n\n", time.Now())

	buf += fmt.Sprintf("DELETE FROM `%s`;\n\n", name)

	buf += fmt.Sprintf("INSERT INTO `%s` (%s) VALUES\n", name, strings.Join(columns, ","))
	buf += strings.Join(data, ",\n")
	buf += ";"

	fn := CamelToSnake(name) + ".sql"
	if err := ioutil.WriteFile(fn, []byte(buf), 0644); err == nil {
		fmt.Println("Exported", fn, len(data))
	}
}

func ExportProtoBuf(sheet *xlsx.Sheet, name string, field_list []FieldInfo, filename string) {
	var buf string

	buf += fmt.Sprintf("// Auto generated by kw-data-expoter\n")
	buf += fmt.Sprintf("// Source: %s::%s\n", filename, sheet.Name)
	buf += fmt.Sprintf("// Date: %s\n\n", time.Now())

	buf += fmt.Sprintf("message %sData {\n", name)
	buf += fmt.Sprintf("  message %s {\n", name)

	for _, field := range field_list {
		var ftype string
		switch field.ftype {
		case "":
			continue
		case "int8", "int16":
			ftype = "int32"
		case "uint8", "uint16":
			ftype = "uint32"
		default:
			ftype = field.ftype
		}
		buf += fmt.Sprintf("    required %s %s = %d;\n", ftype, field.fname, field.col+1)
	}
	buf += fmt.Sprintf("  }\n\n")

	buf += fmt.Sprintf("  repeated %s data = 1;\n", name)
	buf += fmt.Sprintf("}\n")

	fn := CamelToSnake(name) + ".proto"
	if err := ioutil.WriteFile(fn, []byte(buf), 0644); err == nil {
		fmt.Println("Exported", fn)
	}
}

func ExportFile(filename string) {
	fp, err := xlsx.OpenFile(filename)
	if err != nil {
		fmt.Errorf("OpenFile Error:", filename)
		return
	}

	for _, sheet := range fp.Sheets {
		if sheet.MaxRow < 3 || sheet.MaxCol < 2 {
			continue
		}

		// 컬럼 정보
		var field_list []FieldInfo
		for col := 0; col < sheet.MaxCol; col++ {
			fname := TrimString(sheet.Cell(1, col))
			ftype := TrimString(sheet.Cell(2, col))
			if len(fname) > 0 {
				field := FieldInfo{col: col, fname: fname, ftype: ftype}
				field_list = append(field_list, field)
			}
		}
		// 명령어
		var cmd string = TrimString(sheet.Cell(0, 0))
		// 이름
		var name string = TrimString(sheet.Cell(0, 1))

		// csv 파일
		if USE_CSV && !strings.HasPrefix(cmd, "!") {
			ExportCSV(sheet, field_list)
		}
		if len(name) > 0 {
			switch cmd {
			case "json", "JSON":
				if USE_JSON {
					ExportJson(sheet, name, field_list)
				}
			case "sql", "SQL":
				if USE_SQL {
					ExportSQL(sheet, name, field_list, filename)
				}
			case "protobuf", "PROTOBUF":
				if USE_PROTOBUF {
					ExportProtoBuf(sheet, name, field_list, filename)
				}
			}
		}
	}
}

func main() {
	no_csv := flag.Bool("no-csv", false, "csv 형식 사용 안함")
	flag_all := flag.Bool("all", false, "모든 형식 사용")
	flag.BoolVar(&USE_JSON, "json", false, "json 형식 사용")
	flag.BoolVar(&USE_SQL, "sql", false, "sql 형식 사용")
	flag.BoolVar(&USE_PROTOBUF, "protobuf", false, "protobuf 형식 사용")
	flag.Parse()

	USE_CSV = !(*no_csv)
	if *flag_all {
		USE_JSON = true
		USE_SQL = true
		USE_PROTOBUF = true
	}

	// 기본은 현재 디렉토리
	var target string = "."
	if flag.NArg() > 0 {
		target = flag.Arg(0)
	}

	fileinfo, err := os.Stat(target)
	if os.IsNotExist(err) {
		return
	}

	if fileinfo.IsDir() {
		if files, err := ioutil.ReadDir(target); err == nil {
			for _, file := range files {
				if path.Ext(file.Name()) == ".xlsx" && !strings.HasPrefix(file.Name(), "~") {
					ExportFile(path.Join(target, file.Name()))
				}
			}
		}
	} else {
		ExportFile(target)
	}
}
